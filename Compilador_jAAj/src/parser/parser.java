
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ArbolSintactico.ArbolSintactico;
import ArbolSintactico.ArbolSintactico.*;
import ArbolSintactico.Tipo;
import Semantico.Semantico;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import TablaSimbolos.TablaSimbolos;
import TablaSimbolos.TipoSub;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\022\012\000\002\030" +
    "\004\000\002\030\002\000\002\031\003\000\002\031\004" +
    "\000\002\031\004\000\002\024\004\000\002\024\002\000" +
    "\002\023\004\000\002\023\007\000\002\023\005\000\002" +
    "\023\011\000\002\023\012\000\002\023\011\000\002\023" +
    "\004\000\002\026\004\000\002\026\002\000\002\027\005" +
    "\000\002\027\004\000\002\027\007\000\002\027\005\000" +
    "\002\027\011\000\002\027\012\000\002\027\011\000\002" +
    "\027\004\000\002\025\003\000\002\025\003\000\002\002" +
    "\014\000\002\003\003\000\002\003\002\000\002\004\005" +
    "\000\002\004\002\000\002\005\006\000\002\005\002\000" +
    "\002\006\006\000\002\006\005\000\002\006\007\000\002" +
    "\007\003\000\002\007\002\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\011\005\000\002\012\004" +
    "\000\002\013\004\000\002\013\006\000\002\013\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\005\000\002\014\004\000\002\015\003\000\002\015" +
    "\005\000\002\016\004\000\002\016\002\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\005\000\002\021\003" +
    "\000\002\021\005\000\002\021\002\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\044\004\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\020\003\016\023\ufffe\040\017\041\022\042\010\043" +
    "\011\046\015\001\002\000\010\025\uffd9\036\uffd9\046\uffd9" +
    "\001\002\000\010\025\uffd8\036\uffd8\046\uffd8\001\002\000" +
    "\004\037\256\001\002\000\004\046\254\001\002\000\020" +
    "\003\ufffd\023\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\046" +
    "\ufffd\001\002\000\004\024\124\001\002\000\004\037\253" +
    "\001\002\000\010\042\uffb8\043\uffb8\046\uffb8\001\002\000" +
    "\020\003\016\023\ufffe\040\017\041\022\042\010\043\011" +
    "\046\015\001\002\000\004\023\100\001\002\000\006\042" +
    "\010\043\011\001\002\000\004\046\024\001\002\000\006" +
    "\010\026\037\uffda\001\002\000\004\037\uffdb\001\002\000" +
    "\016\020\035\024\036\035\032\046\031\047\030\050\037" +
    "\001\002\000\004\037\uffde\001\002\000\042\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\021\uffd0\025\uffd0\033\uffd0\036" +
    "\uffd0\037\uffd0\001\002\000\044\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\072\021\uffd1\025\uffd1\033\uffd1\036\uffd1" +
    "\037\uffd1\001\002\000\004\020\067\001\002\000\040\004" +
    "\052\005\056\006\051\007\060\011\055\012\054\013\062" +
    "\014\057\015\064\016\063\017\050\021\uffc9\033\061\036" +
    "\uffc9\037\uffc9\001\002\000\004\037\uffd5\001\002\000\016" +
    "\020\035\024\036\035\032\046\031\047\030\050\037\001" +
    "\002\000\012\035\032\046\031\047\030\050\037\001\002" +
    "\000\042\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf" +
    "\025\uffcf\033\uffcf\036\uffcf\037\uffcf\001\002\000\006\025" +
    "\uffcc\036\043\001\002\000\004\025\042\001\002\000\010" +
    "\021\uffd2\036\uffd2\037\uffd2\001\002\000\012\035\032\046" +
    "\031\047\030\050\037\001\002\000\004\025\uffcb\001\002" +
    "\000\004\021\046\001\002\000\040\004\052\005\056\006" +
    "\051\007\060\011\055\012\054\013\062\014\057\015\064" +
    "\016\063\017\050\021\uffc9\033\061\036\uffc9\037\uffc9\001" +
    "\002\000\016\020\035\024\036\035\032\046\031\047\030" +
    "\050\037\001\002\000\016\020\uffbd\024\uffbd\035\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\001\002\000\016\020\uffc6\024\uffc6" +
    "\035\uffc6\046\uffc6\047\uffc6\050\uffc6\001\002\000\016\020" +
    "\uffc8\024\uffc8\035\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002" +
    "\000\010\021\uffd3\036\uffd3\037\uffd3\001\002\000\016\020" +
    "\uffc3\024\uffc3\035\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002" +
    "\000\016\020\uffc4\024\uffc4\035\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\001\002\000\016\020\uffc7\024\uffc7\035\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\001\002\000\016\020\uffc1\024\uffc1\035" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000\016\020\uffc5" +
    "\024\uffc5\035\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002\000" +
    "\016\020\uffbf\024\uffbf\035\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\001\002\000\016\020\uffc2\024\uffc2\035\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\001\002\000\016\020\uffbe\024\uffbe\035\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\001\002\000\016\020\uffc0\024" +
    "\uffc0\035\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\010" +
    "\021\uffca\036\uffca\037\uffca\001\002\000\010\021\uffd4\036" +
    "\uffd4\037\uffd4\001\002\000\004\021\070\001\002\000\042" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\021\uffce\025\uffce" +
    "\033\uffce\036\uffce\037\uffce\001\002\000\042\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\021\uffcd\025\uffcd\033\uffcd\036" +
    "\uffcd\037\uffcd\001\002\000\020\020\035\021\uffb9\024\036" +
    "\035\032\046\031\047\030\050\037\001\002\000\004\021" +
    "\077\001\002\000\006\021\uffbb\036\075\001\002\000\020" +
    "\020\035\021\uffb9\024\036\035\032\046\031\047\030\050" +
    "\037\001\002\000\004\021\uffba\001\002\000\042\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\021\uffbc\025\uffbc\033\uffbc" +
    "\036\uffbc\037\uffbc\001\002\000\004\045\101\001\002\000" +
    "\004\022\102\001\002\000\026\003\112\023\ufff9\027\103" +
    "\030\107\031\105\034\113\041\022\042\010\043\011\046" +
    "\111\001\002\000\004\020\154\001\002\000\004\023\153" +
    "\001\002\000\004\022\144\001\002\000\004\037\143\001" +
    "\002\000\004\020\135\001\002\000\026\003\112\023\ufff9" +
    "\027\103\030\107\031\105\034\113\041\022\042\010\043" +
    "\011\046\111\001\002\000\010\010\026\020\072\024\124" +
    "\001\002\000\004\037\120\001\002\000\004\020\114\001" +
    "\002\000\016\020\035\024\036\035\032\046\031\047\030" +
    "\050\037\001\002\000\004\021\116\001\002\000\004\037" +
    "\117\001\002\000\026\003\ufff7\023\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\034\ufff7\041\ufff7\042\ufff7\043\ufff7\046\ufff7\001" +
    "\002\000\026\003\ufff2\023\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\034\ufff2\041\ufff2\042\ufff2\043\ufff2\046\ufff2\001\002\000" +
    "\004\037\uffe7\001\002\000\004\037\uffe6\001\002\000\004" +
    "\037\133\001\002\000\006\042\010\043\011\001\002\000" +
    "\004\025\131\001\002\000\006\025\uffd7\036\127\001\002" +
    "\000\006\042\010\043\011\001\002\000\004\025\uffd6\001" +
    "\002\000\006\010\026\037\uffda\001\002\000\004\037\uffdc" +
    "\001\002\000\026\003\ufff6\023\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\034\ufff6\041\ufff6\042\ufff6\043\ufff6\046\ufff6\001\002" +
    "\000\004\023\ufffa\001\002\000\016\020\035\024\036\035" +
    "\032\046\031\047\030\050\037\001\002\000\004\021\137" +
    "\001\002\000\004\022\140\001\002\000\026\003\112\023" +
    "\ufff9\027\103\030\107\031\105\034\113\041\022\042\010" +
    "\043\011\046\111\001\002\000\004\023\142\001\002\000" +
    "\026\003\ufff3\023\ufff3\027\ufff3\030\ufff3\031\ufff3\034\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\046\ufff3\001\002\000\026\003" +
    "\ufff8\023\ufff8\027\ufff8\030\ufff8\031\ufff8\034\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\046\ufff8\001\002\000\026\003\112\023" +
    "\ufff9\027\103\030\107\031\105\034\113\041\022\042\010" +
    "\043\011\046\111\001\002\000\004\023\146\001\002\000" +
    "\004\032\147\001\002\000\004\020\150\001\002\000\016" +
    "\020\035\024\036\035\032\046\031\047\030\050\037\001" +
    "\002\000\004\021\152\001\002\000\026\003\ufff4\023\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\034\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\046\ufff4\001\002\000\004\002\000\001\002\000\016" +
    "\020\035\024\036\035\032\046\031\047\030\050\037\001" +
    "\002\000\004\021\156\001\002\000\004\022\157\001\002" +
    "\000\026\003\112\023\ufff9\027\103\030\107\031\105\034" +
    "\113\041\022\042\010\043\011\046\111\001\002\000\004" +
    "\023\161\001\002\000\026\003\ufff5\023\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\034\ufff5\041\ufff5\042\ufff5\043\ufff5\046\ufff5" +
    "\001\002\000\004\023\uffff\001\002\000\010\042\010\043" +
    "\011\046\uffe3\001\002\000\004\046\166\001\002\000\004" +
    "\046\uffe4\001\002\000\004\020\167\001\002\000\010\021" +
    "\uffe1\042\010\043\011\001\002\000\004\021\200\001\002" +
    "\000\004\046\172\001\002\000\006\021\uffdf\036\173\001" +
    "\002\000\006\042\010\043\011\001\002\000\004\021\uffe2" +
    "\001\002\000\004\046\176\001\002\000\006\021\uffdf\036" +
    "\173\001\002\000\004\021\uffe0\001\002\000\004\022\201" +
    "\001\002\000\030\003\212\023\ufff0\026\204\027\203\030" +
    "\207\031\202\034\213\041\022\042\010\043\011\046\210" +
    "\001\002\000\004\022\244\001\002\000\004\020\236\001" +
    "\002\000\016\020\035\024\036\035\032\046\031\047\030" +
    "\050\037\001\002\000\030\003\212\023\ufff0\026\204\027" +
    "\203\030\207\031\202\034\213\041\022\042\010\043\011" +
    "\046\210\001\002\000\004\037\232\001\002\000\004\020" +
    "\224\001\002\000\010\010\026\020\072\024\124\001\002" +
    "\000\004\023\221\001\002\000\004\037\220\001\002\000" +
    "\004\020\214\001\002\000\016\020\035\024\036\035\032" +
    "\046\031\047\030\050\037\001\002\000\004\021\216\001" +
    "\002\000\004\037\217\001\002\000\030\003\uffed\023\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\034\uffed\041\uffed\042" +
    "\uffed\043\uffed\046\uffed\001\002\000\030\003\uffe8\023\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\034\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\046\uffe8\001\002\000\020\003\uffe5\023\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\046\uffe5\001\002\000" +
    "\004\037\223\001\002\000\030\003\uffec\023\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\034\uffec\041\uffec\042\uffec\043" +
    "\uffec\046\uffec\001\002\000\016\020\035\024\036\035\032" +
    "\046\031\047\030\050\037\001\002\000\004\021\226\001" +
    "\002\000\004\022\227\001\002\000\030\003\212\023\ufff0" +
    "\026\204\027\203\030\207\031\202\034\213\041\022\042" +
    "\010\043\011\046\210\001\002\000\004\023\231\001\002" +
    "\000\030\003\uffe9\023\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\034\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9\001\002" +
    "\000\030\003\uffee\023\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\034\uffee\041\uffee\042\uffee\043\uffee\046\uffee\001\002" +
    "\000\004\023\ufff1\001\002\000\004\037\235\001\002\000" +
    "\030\003\uffef\023\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\034\uffef\041\uffef\042\uffef\043\uffef\046\uffef\001\002\000" +
    "\016\020\035\024\036\035\032\046\031\047\030\050\037" +
    "\001\002\000\004\021\240\001\002\000\004\022\241\001" +
    "\002\000\030\003\212\023\ufff0\026\204\027\203\030\207" +
    "\031\202\034\213\041\022\042\010\043\011\046\210\001" +
    "\002\000\004\023\243\001\002\000\030\003\uffeb\023\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\034\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\046\uffeb\001\002\000\030\003\212\023\ufff0" +
    "\026\204\027\203\030\207\031\202\034\213\041\022\042" +
    "\010\043\011\046\210\001\002\000\004\023\246\001\002" +
    "\000\004\032\247\001\002\000\004\020\250\001\002\000" +
    "\016\020\035\024\036\035\032\046\031\047\030\050\037" +
    "\001\002\000\004\021\252\001\002\000\030\003\uffea\023" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\034\uffea\041\uffea" +
    "\042\uffea\043\uffea\046\uffea\001\002\000\020\003\ufffb\023" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\046\ufffb\001\002" +
    "\000\006\010\026\037\uffda\001\002\000\004\037\uffdd\001" +
    "\002\000\020\003\ufffc\023\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\046\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\022\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\013\006\011" +
    "\010\012\030\020\031\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\162\001\001\000\014\002\013\006\011\010\012\030\161" +
    "\031\017\001\001\000\002\001\001\000\004\010\022\001" +
    "\001\000\002\001\001\000\006\007\026\012\024\001\001" +
    "\000\002\001\001\000\006\013\033\014\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\070\001\001" +
    "\000\002\001\001\000\006\016\065\017\046\001\001\000" +
    "\002\001\001\000\006\013\044\014\032\001\001\000\006" +
    "\014\037\015\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\037" +
    "\015\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\052\017\046\001\001\000\006\013\064\014\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\073" +
    "\014\032\021\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\073\014\032\021\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\105\010\012\023\107\024\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\105\010\012" +
    "\023\107\024\133\001\001\000\010\012\120\020\121\025" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\114\014\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\125\011" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\125\011\127\001\001\000\002\001\001\000\006\007" +
    "\131\012\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\135\014\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\105\010\012" +
    "\023\107\024\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\105\010\012\023\107" +
    "\024\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\150\014\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\154\014\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\105\010\012\023\107\024\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\163\010\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\167\010\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\173\001" +
    "\001\000\004\010\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\205\010\012\026\210\027\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\233\014\032\001\001\000\012\006\205\010\012\026\232" +
    "\027\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\120\020\121\025\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\214\014" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\224\014\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\205\010" +
    "\012\026\227\027\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\236\014\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\205\010" +
    "\012\026\241\027\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\205\010\012\026\244\027\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\250\014\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\254\012\024" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    ArbolSintactico arbol= new ArbolSintactico(); // Para generar el arbol sintactico.
    ArrayList<String> errores = new ArrayList<>(); // Lista de errores sintacticos.
    TablaSimbolos ts = new TablaSimbolos(); // Para generar la tabla de simbolos.
    Semantico sem = new Semantico(ts); // Para verificar semanticamente el codigo.

    // Metodos para extrer el arbol, la tabla de simbolos y el semantico del parser.
    public ArbolSintactico getArbol(){ return arbol; }
    public TablaSimbolos getTablaSimbolos(){ return ts; }
    public Semantico getSemantico(){ return sem; }
    
    /**
     * Metodo para añadir un simbolo en la tabla de simbolos, ademas comprueba 
     * si ya existe un simbolo igual.
     * 
     * @param id del simbolo
     * @param tipo del simbolo
     * @param tipoSub del simbolo (clase)
     * @return true si ha sido añadido, false si no ha podido.
     */
    private boolean addSim(String id, Tipo tipo, TipoSub tipoSub){;
        if(!ts.addSimbolo(id, tipo, tipoSub, cur_token.left)){
            sem.addError(4, cur_token.left, id);
            return false;
        }
        return true;
    }

    private boolean addSim(String id, LTipo ltipo, TipoSub tipoSub){;
        if(!ts.addSimbolo(id, ltipo, tipoSub, cur_token.left)){
            sem.addError(4, cur_token.left, id);
            return false;
        }
        return true;
    }
    
    /**
     * Si hay un error en el sintactico, este metodo añade el error pertinente a
     * la lista de errores.
     * 
     * @param cur_token es el token actual.
     */
    @Override
    public void syntax_error(Symbol cur_token) {
        String mensaje = "\t - " + cur_token.toString() + "." + this.showExpectedTokenIds() + " en linea " + cur_token.left;
        this.report_error(mensaje, cur_token);
    }
    
    /**
     * Añade el error a la lista de errores del sintactico.
     * 
     * @param mensaje
     * @param info 
     */
    @Override
    public void report_error(String mensaje, Object info) {
        errores.add(mensaje);
    }
    
    /**
     * Se sobre escribe el error fatal para que no se muestre, ya que no aporta 
     * al sintactico y se utiliza nuestro propio sistema de errores.
     * 
     * @param mensaje
     * @param info 
     */
    @Override
    public void report_fatal_error(String mensaje, Object info) {
        //report_error(mensaje, null);
    }
    
    /**
     * Metodo que devuelve los tokens que el analizador estaba esperando para 
     * mostrarlos en los mensajes de error.
     * 
     * @return 
     */
    private String showExpectedTokenIds() {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList<>();
        for (Integer expected : ids) {
            list.add(this.symbl_name_from_id(expected));
        }
        if (list.size() > 0) {
            return " Se esperaba: " + list.toString();
        } else {
            return "";
        }
    }

    /**
     * Metodo para saber si ha habido errores en el sintactico.
     * 
     * @return 
     */
    public boolean hayErrores(){
        return !errores.isEmpty();
    }

    /**
     * Devuelve todos los mensajes de error que ha habido en el sintactico.
     * 
     * @return 
     */
    public String toStringErrores(){
        String s = "";
        for(String e : errores){
            s += e + "\n";
        }
        return s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Init start_val = (Init)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= DECLARE LKEY DEFINICIONES RKEY MAIN LKEY SENTENCIAS RKEY 
            {
              Init RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Definiciones d = (Definiciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias m = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.setRaiz(new Init(d, m)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEFINICIONES ::= DEFINICION DEFINICIONES 
            {
              Definiciones RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Definicion d = (Definicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Definiciones s = (Definiciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Definiciones(d,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFINICIONES ::= 
            {
              Definiciones RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINICION ::= DFUNCION 
            {
              Definicion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dfuncion f = (Dfuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Definicion(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION ::= DECLARACION PUNTYCOMA 
            {
              Definicion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Definicion(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINICION ::= error PUNTYCOMA 
            {
              Definicion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Sentencias RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sentencias(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= 
            {
              Sentencias RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DECLARACION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sentencia(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= OUT LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 sem.verExpr(e, Tipo.INT, cur_token.left); RESULT = new Sentencia(new Out(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ID SENTENCIA_ID PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentenciaId d = (SentenciaId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(sem.verId(i, cur_token.left)){ sem.selOpId(i, d, cur_token.left);} RESULT = new Sentencia(new IdSentencia(new Id(i), d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE LPAREN EXPRESION RPAREN LKEY SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new While(e, s));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= REPEAT LKEY SENTENCIAS RKEY UNTIL LPAREN EXPRESION RPAREN 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new Repeat(e, s));   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF LPAREN EXPRESION RPAREN LKEY SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new If(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= error PUNTYCOMA 
            {
              Sentencia RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // R_SENTENCIAS ::= R_SENTENCIA R_SENTENCIAS 
            {
              Sentencias RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sentencias(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // R_SENTENCIAS ::= 
            {
              Sentencias RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // R_SENTENCIA ::= RETRN EXPRESION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sentencia(new Return(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // R_SENTENCIA ::= DECLARACION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sentencia(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // R_SENTENCIA ::= OUT LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 sem.verExpr(e, Tipo.INT, cur_token.left); RESULT = new Sentencia(new Out(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // R_SENTENCIA ::= ID SENTENCIA_ID PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentenciaId d = (SentenciaId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(sem.verId(i, cur_token.left)){ sem.selOpId(i, d, cur_token.left);} RESULT = new Sentencia(new IdSentencia(new Id(i), d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // R_SENTENCIA ::= WHILE LPAREN EXPRESION RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new While(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // R_SENTENCIA ::= REPEAT LKEY R_SENTENCIAS RKEY UNTIL LPAREN EXPRESION RPAREN 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new Repeat(e, s));   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // R_SENTENCIA ::= IF LPAREN EXPRESION RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new If(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // R_SENTENCIA ::= error PUNTYCOMA 
            {
              Sentencia RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_ID ::= ASIGNACION 
            {
              SentenciaId RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SentenciaId(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_ID ::= FUNCION 
            {
              SentenciaId RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param f = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SentenciaId(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DFUNCION ::= FUNCTION M RETURN ID LPAREN PARAMETRO RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Dfuncion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo r = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Dparam p = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verRet(i, r, s, cur_token.left); addSim(i, r, TipoSub.FUNCION); RESULT = new Dfuncion(new Id(i), r, p, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DFUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RETURN ::= TYPE 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURN ::= 
            {
              Tipo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETRO ::= TYPE ID PARAMCONCAT 
            {
              Dparam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dparam d = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addSim(i, t, TipoSub.PARAMETRO); RESULT = new Dparam(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETRO ::= 
            {
              Dparam RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMCONCAT ::= COMA TYPE ID PARAMCONCAT 
            {
              Dparam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dparam d = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addSim(i, t, TipoSub.PARAMETRO); RESULT = new Dparam(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCONCAT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMCONCAT ::= 
            {
              Dparam RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCONCAT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= CONST TYPE ID DECLAREND 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(addSim(i, t, TipoSub.CONSTANTE)){sem.verConst(i, d, cur_token.left);} RESULT = new Declaracion(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= TYPE ID DECLAREND 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(addSim(i, t, TipoSub.VARIABLE)){sem.verVar(i, d, cur_token.left);} RESULT = new Declaracion(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= ID LCOR LTYPE RCOR DECLAREND 
            {
              Declaracion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo lt = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(addSim(i, lt, TipoSub.TUPLA)){sem.verVar(i, d, cur_token.left);}RESULT = new Declaracion( lt, new Id(i))
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLAREND ::= ASIGNACION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAREND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLAREND ::= 
            {
              Expresion RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAREND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPE ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPE ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LTYPE ::= TYPE 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LTYPE(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTYPE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LTYPE ::= TYPE COMA LTYPE 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo lt = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LTYPE(t, lt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTYPE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= VALOR OPERACION 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion o = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sem.priOp(new Expresion(v, o)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= LPAREN EXPRESION RPAREN OPERACION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion o = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expresion(e,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= LCOR LVALOR RCOR 
            {
              Expresion RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Valor lv = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expresion(lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR ::= ID 
            {
              Valor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sem.verId(id, cur_token.left); RESULT = new Valor(new Id(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR ::= NUMERO 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Valor(new Numero(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALOR ::= BOLEAN 
            {
              Valor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Valor(new Boleano(b)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALOR ::= IN LPAREN RPAREN 
            {
              Valor RESULT =null;
		 RESULT = new Valor(new In()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR ::= ID FUNCION 
            {
              Valor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param f = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(sem.verId(i, cur_token.left)){ sem.verFunc(i, f, cur_token.left); } RESULT = new Valor(new IdSentencia(new Id(i), new SentenciaId(f))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LVALOR ::= VALOR 
            {
              Valor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LVALOR(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LVALOR ::= VALOR COMA LVALOR 
            {
              Valor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Valor lv = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LVALOR(v, lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= OP EXPRESION 
            {
              Operacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operaciones o = (Operaciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Operacion(o,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION ::= 
            {
              Operacion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP ::= MULT 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MULT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP ::= DIV 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP ::= SUMA 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.SUMA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP ::= RESTA 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.RESTA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP ::= MAYORQUE 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MAYORQUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP ::= MENORQUE 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MENORQUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP ::= MAYORIGU 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MAYORIGU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP ::= MENORIGU 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MENORIGU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP ::= IGUALES 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.IGUALES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP ::= NIGUALES 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.NIGUALES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP ::= OR 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP ::= AND 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION ::= LPAREN INPARAM RPAREN 
            {
              Param RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param i = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INPARAM ::= EXPRESION 
            {
              Param RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INPARAM ::= EXPRESION COMA INPARAM 
            {
              Param RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(e, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INPARAM ::= 
            {
              Param RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // M ::= 
            {
              Object RESULT =null;
		 ts.addnivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
